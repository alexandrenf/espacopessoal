generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  fcmToken               String?
  accounts               Account[]
  notepad                Notepad[]
  posts                  Post[]
  scheduledNotifications ScheduledNotification[]
  sessions               Session[]
  userThings             UserThings?

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserThings {
  id                 String   @id @default(cuid())
  notePadUrl         String
  privateOrPublicUrl Boolean?
  password           String?
  ownedById          String   @unique
  ownedBy            User     @relation(fields: [ownedById], references: [id])

  @@index([ownedById])
}

model Notepad {
  id          Int      @id @default(autoincrement())
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model ScheduledNotification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  body         String
  url          String?
  scheduledFor DateTime
  fcmToken     String
  sent         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduledFor, sent])
  @@index([userId])
}
